
\documentclass{article}
\usepackage{noweb}
\usepackage{listings}
\usepackage{framed}

\lstset{
  basicstyle=\footnotesize,
  breakatwhitespace=false,
  breaklines=true,
  frame=single,
  language=Bash,
  stepnumber=2
}

\title{Rust: Hello, world}
\author{Matt Champion}
\date{\today}
\begin{document}
\maketitle

The Rust hello world program, although not as brief as some languages, avoids verbosity.
\section{Hello, world}
The hello world program is a traditional program frequently used as the first program written in a language the programmer has no experience with.
The program, when run, writes a short message to the standard output and then exits with a successful exit code.
The message has several variations: ``Hello, world'', ``Hello, world!'' and ``Hello world'' are common.
\section{Writing to standard output}
The standard output, frequently written as \emph{stdout}, is an output stream that the program can write to.
Programs intended to be run from a terminal use this stream to return the result or feedback of the program.

Writing to standard output can be done using the \emph{println!} macro.
The `!' indicates that it is a macro.
A macro looks a like function call but it is expanded out into a larger piece of code during compilation.
It's arguments are treated differently, instead of values it can take fragments of code like a type or an identifier.
The \emph{println!} macro can take a variable number of expressions after a string and substitute placeholders in the string for formatted values.

\begin{framed}
<<write to standard output>>=
println!("Hello, world");
@
\end{framed}
\section{Code entry point}
In Rust the entry point for the executable is specified with a function called \emph{main}.
Neither arguments nor a return type are required.

\begin{framed}
<<entry point>>=
fn main() {
    <<write to standard output>>
}
@
\end{framed}
The exit code returned by this program is \emph{0}.
This exit code is used to represent the successful execution of the program.
The main function does not support specifying an exit code.
To exit with an non-zero exit code another function must be called.
\emph{std::process::exit}.
The program exits before this function returns.
\section{Building Rust}
It also benefits from an impressive build system, \emph{cargo}.
Cargo build are specified through a TOML manifest file.

\begin{framed}
<<Cargo.toml>>=
<<package declaration>>
@
\end{framed}
The manifest declares some basic properties of the package.

\begin{framed}
<<package declaration>>=
[package]
name = "hello"
version = "0.1.0"
authors = ["Matt Champion <mattunderscorechampion@gmail.com>"]
@
\end{framed}
Cargo expects the entry point to be included in the file \emph{src/main.rs}.

\begin{framed}
<<src/main.rs>>=
<<entry point>>
@
\end{framed}
\section{Source repository}
The source repository is
\begin{lstlisting}
https://github.com/mattunderscorechampion/literate-rust-hello-world
\end{lstlisting}
It can be checked out out using Git.
\begin{lstlisting}
git clone https://github.com/mattunderscorechampion/literate-rust-hello-world.git
\end{lstlisting}
Git is a distributed version control system. Version control systems track changes to files and aid collaboration by providing ways to share files and and changes.
\section{This project}
This project is written using a literate programming approach.
Literate programming emphasises writing for the people working with the code instead of the machines.
The source code is divided into small chunks and mixed together with the explanation for each chunk in a single document.
The document can be tangled to produce compilable source code.
The document can also be woven to produce this documentation.

A Makefile is provided that can perform both weave and tangle the document.
The Makefile can also compile the tangled source code to create an executable.

To build the executable run:
\begin{lstlisting}
make executable
\end{lstlisting}

To build this documentation run:
\begin{lstlisting}
make book
\end{lstlisting}

\end{document}
